[settings]
functionname=hi_kernel_slic_set_impedence;  
attributenum=3;
attributeflag = 1 ;   //0:close 1:open

[parameter]
attribute=alias<chip_idx>    type<uint>    range<0,1>      default<0x0>; /*Ð¾Æ¬ºÅ*/
attribute=alias<port_idx>    type<uint>    range<0,1>      default<0x0>; /*¶Ë¿ÚºÅ*/
attribute=alias<impedence>   type<binary>  range<0,128>    default<0xED 0x00 0xA9 0x4C 0x01 0x49 0xCA 0xFC 0x98 0xCC 0x2A 0xA2 0x3B 0x98 0xB3 0x43 0xA2 0x3A 0xAB 0x9A 0x2D 0xAA 0xB6 0x9F 0x01 0x8A 0x2E 0x01 0xC4 0xA0 0x2E 0x23 0x3A 0x2E 0x9F 0x87 0x4C 0xCE 0xB2 0x27 0x88 0x4A 0x20 0xBA 0xAC 0x22 0xB5 0x5A 0xB5 0x3B 0x4D 0xA2 0x27 0x82 0xA8 0x71 0x80 0xA9 0xF0 0x50 0x00 0x86 0xCB 0x5E 0x22 0xBC 0x12 0xA3 0xA9 0xFA 0xC6 0x34 0xE2 0x9F 0xBA 0xF0 0x96 0x2E 0x01 0x00>;   /*×è¿¹profile*/

[help]
typedef struct
{
    hi_uint32 ui_chip_idx;
    hi_uint32 ui_port_idx;
}hi_kernel_slic_chip_port_s;

/* ×è¿¹ÉèÖÃ²ÎÊý½á¹¹ */
typedef struct
{
    hi_kernel_slic_chip_port_s st_chipport;
    hi_uchar8 auc_impedence[HI_KERNEL_SLIC_IMPEDENCE_PARA_LEN];
}hi_kernel_slic_impedence_set_s;

/* AC FXS RF14 600R Wideband Coefficients (Default)  */
const VpProfileDataType AC_FXS_RF14_WB_600R_DEF[] =
{
  /* AC Profile */
 0xED, 0x00, 0xA9, 0x4C, 0x01, 0x49, 0xCA, 0xFC, 0x98, 0xCC, 0x2A, 0xA2,
 0x3B, 0x98, 0xB3, 0x43, 0xA2, 0x3A, 0xAB, 0x9A, 0x2D, 0xAA, 0xB6, 0x9F,
 0x01, 0x8A, 0x2E, 0x01, 0xC4, 0xA0, 0x2E, 0x23, 0x3A, 0x2E, 0x9F, 0x87,
 0x4C, 0xCE, 0xB2, 0x27, 0x88, 0x4A, 0x20, 0xBA, 0xAC, 0x22, 0xB5, 0x5A,
 0xB5, 0x3B, 0x4D, 0xA2, 0x27, 0x82, 0xA8, 0x71, 0x80, 0xA9, 0xF0, 0x50,
 0x00, 0x86, 0xCB, 0x5E, 0x22, 0xBC, 0x12, 0xA3, 0xA9, 0xFA, 0xC6, 0x34,
 0xE2, 0x9F, 0xBA, 0xF0, 0x96, 0x2E, 0x01, 0x00
};