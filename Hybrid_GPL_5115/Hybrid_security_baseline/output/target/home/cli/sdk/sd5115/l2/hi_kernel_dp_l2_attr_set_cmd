[settings]
functionname = hi_kernel_dp_l2_attr_set_cmd;
attributenum = 36;
attributeflag= 1;

[parameter]
attribute=alias<mac_learn_mode>                type<uint>        range<0x0,0xFFFFFFFF>    default<0>; 
attribute=alias<mac_learn_fail_act>            type<uint>        range<0x0,0xFFFFFFFF>    default<0>; 
attribute=alias<mac_learn_en>                  type<binary>      range<0,32>              default<"0x00">; 
attribute=alias<mac_learn_limit_en>            type<binary>      range<0,32>              default<"0x00">; 
attribute=alias<mac_limit_num>                 type<binary>      range<0,32>              default<"0x00">; 
attribute=alias<port_stat_en>                  type<binary>      range<0,28>              default<"0x00">; 
attribute=alias<port_stat_type>                type<binary>      range<0,28>              default<"0x00">; 
attribute=alias<sw_uuc_thru>                   type<uint>        range<0,0xFFFFFFFF>      default<0>; 
attribute=alias<sw_umc_thru>                   type<uint>        range<0,0xFFFFFFFF>      default<0>; 
attribute=alias<age_en>                        type<uint>        range<0x0,0xFFFFFFFF>    default<0>; 
attribute=alias<age_time>                      type<uint>        range<0x0,0xFFFFFFFF>    default<0>; 
attribute=alias<mc_match_mode>                 type<uint>        range<0x0,0xFFFFFFFF>    default<0>; 
attribute=alias<uc_match_mode>                 type<uint>        range<0x0,0xFFFFFFFF>    default<0>; 
attribute=alias<uc_unhit_act>                  type<uint>        range<0x0,0xFFFFFFFF>    default<0>; 
attribute=alias<tunnel_mc_unhit_act>           type<uint>        range<0x0,0xFFFFFFFF>    default<0>; 
attribute=alias<bc_act>                        type<uint>        range<0x0,0xFFFFFFFF>    default<0>; 
attribute=alias<mc_act>                        type<uint>        range<0x0,0xFFFFFFFF>    default<0>; 
attribute=alias<pon_mc_unhit_act>              type<binary>      range<0,16>              default<"0x00">; 
attribute=alias<mc_egr>                        type<binary>      range<0,16>              default<"0x00">; 
attribute=alias<igr_filter_en>                 type<binary>      range<0,28>              default<"0x00">; 
attribute=alias<uc_unhit_igr_filter_en>        type<binary>      range<0,28>              default<"0x00">; 
attribute=alias<mc_unhit_igr_filter_en>        type<binary>      range<0,28>              default<"0x00">; 
attribute=alias<mc_filter_en>                  type<uint>        range<0x0,0xFFFFFFFF>    default<0>; 
attribute=alias<mc_white_mac>                  type<binary>      range<0x0,6>             default<"0x00">; 
attribute=alias<mc_white_mac_mask>             type<binary>      range<0x0,6>             default<"0x00">; 
attribute=alias<lan_mac>                       type<mac>                                  default<00:e0:fc:55:55:5a>;
attribute=alias<reserved>                      type<ushort>      range<0x0,0xFFFF>        default<0>;
attribute=alias<wan_mac>                       type<binary>      range<0x0,96>            default<"0x00">;              
attribute=alias<ipv4_smac_rep_en>              type<uint>        range<0x0,0xFFFFFFFF>    default<0>; 
attribute=alias<ipv6_smac_rep_en>              type<uint>        range<0x0,0xFFFFFFFF>    default<0>; 
attribute=alias<ipv4_match_mode>               type<uint>        range<0x0,0xFFFFFFFF>    default<0>; 
attribute=alias<ipv6_match_mode>               type<uint>        range<0x0,0xFFFFFFFF>    default<0>; 
attribute=alias<ipv6_ppp_match_mode>           type<uint>        range<0x0,0xFFFFFFFF>    default<0>; 
attribute=alias<ipv4_ppp_match_mode>           type<uint>        range<0x0,0xFFFFFFFF>    default<0>; 
attribute=alias<ipv4_in_tunnel_match_mode>     type<uint>        range<0x0,0xFFFFFFFF>    default<0>; 
attribute=alias<ipv6_in_tunnel_match_mode>     type<uint>        range<0x0,0xFFFFFFFF>    default<0>; 


[help]

/* L2配置属性 */
typedef struct  
{    
    /* 转发抑制 */  
    /* MAC学习相关配置 */
    HI_DP_L2_MAC_LEARN_MODE_E   em_mac_learn_mode;          /* MAC学习模式 */    
    HI_DP_TRANS_ACT_E   em_mac_learn_fail_act;              /* MAC学习失败后的相应报文转发行为 */  

    //5115 add;增加prbs口
    HI_BOOL_E   em_mac_learn_en[HI_DP_PORT_NUM+1];            /* 各端口MAC学习使能 */    
    HI_BOOL_E   em_mac_learn_limit_en[HI_DP_PORT_NUM+1];      /* 各端口MAC学习数目限制使能 */
    uint        ui_mac_learn_limit_num[HI_DP_PORT_NUM+1];     /* 各端口MAC学习数目限制 */

    #ifdef CONFIG_HISI_SD5115_MP_PILOT
    HI_BOOL_E   em_port_stat_en[HI_DP_PORT_NUM];                /*端口统计的状态使能*/              
    HI_DP_CNT_MODE_E   em_port_stat_type[HI_DP_PORT_NUM]; /*端口统计的统计类型*/

    HI_BOOL_E em_sw_uuc_thru;                     /*接入交换模式下，未知单播的行为*/
    HI_BOOL_E em_sw_umc_thru;                     /*接入交换模式下，未知组播的行为*/
    #endif
	
    /* 老化配置 */
    HI_BOOL_E    em_mac_age_en;                             /* MAC表老化使能 */
    uint ui_mac_age_time;          

    /* 查表模式 */  
    HI_DP_L2_MATCH_MODE_E   em_mc_match_mode;            /* 组播查表索引模式 */
    HI_DP_L2_MATCH_MODE_E   em_uc_match_mode;            /* 单播查表索引模式 */

    /* L2转发(查表)失败处理  */
    HI_DP_TRANS_ACT_E   em_uc_unhit_act;                    /* 单播查表失败处理 */   /* 5115增加选择 */
    HI_DP_TRANS_ACT_E   em_tunnel_mc_unhit_act;                  /* 隧道多播查表失败处理 */ 
    
    /* 广播和组播选择转发处理；仅支持:HI_DP_TRANS_BC_E，HI_DP_TRANS_BC_BY_VLAN_E */
    HI_DP_TRANS_ACT_E   em_bc_act;
    HI_DP_TRANS_ACT_E   em_mc_act;
    
    /* 基于gemport和ip version分别配置组播查表失败的处理 */
    HI_DP_TRANS_ACT_E    em_pon_mc_unhit_act[HI_DP_IP_VERSION][HI_DP_MC_GEMPORT_TYPE];   
    hi_dp_port_u    u_mc_egr[HI_DP_IP_VERSION][HI_DP_MC_GEMPORT_TYPE];      /* 多播查表失败act TOPOINT时有效 */

    /* 已知单播，未知单播，未知组播端口隔离  */
    hi_dp_port_u   u_igr_filter_en[HI_DP_PORT_NUM];     //已知报文的端口隔离
    hi_dp_port_u   u_uc_unhit_igr_filter_en[HI_DP_PORT_NUM];     //未知单报的端口隔离
    hi_dp_port_u   u_mc_unhit_igr_filter_en[HI_DP_PORT_NUM];     //未知组播的端口隔离    

    HI_BOOL_E    em_mc_filter_en;   /* 组播过滤使能  */
    uchar        uc_mc_white_mac[HI_DP_MAC_BYTE_NUM];
    uchar        uc_mc_white_mac_mask[HI_DP_MAC_BYTE_NUM];

    /* SD5113V200 TXDMA 新增 TX_ LANS_L3IF_MAC_L_REG等 */
    uchar    uc_lan_mac[HI_DP_LAN_NUM][HI_DP_MAC_BYTE_NUM];    /* ONT LAN侧MAC地址 */
    uchar    uc_wan_mac[HI_DP_WAN_NUM][HI_DP_MAC_BYTE_NUM];    /* ONT WAN侧MAC地址 */    //5115 add

    /* 组播属性 */
    hi_dp_l2_mc_attr_s    st_mc_attr;
    
#ifdef CONFIG_HISI_SD5115_TYPE_T
    /* ARL 全局和本地学习数目控制 */
    hi_dp_l2_learn_lmt_attr_s st_lrn_lmt_attr;
#endif

}


typedef struct
{

    HI_BOOL_E         em_ipv4_smac_rep_en;    /* IPv4组播SMAC替换模式，TX_MC_BASE_CFG_REG */
    HI_BOOL_E         em_ipv6_smac_rep_en;    /* IPv6组播SMAC替换模式，TX_MC_BASE_CFG_REG */
    HI_DP_L2_IP_MC_MATCH_MODE_E    em_ipv4_match_mode;                /* IPv4OE非隧道组播匹配模式 */
    HI_DP_L2_IP_MC_MATCH_MODE_E    em_ipv6_match_mode;                /* IPv6OE非隧道组播匹配模式 */
    HI_DP_L2_IP_MC_MATCH_MODE_E    em_ipv6_ppp_match_mode;            /* Ipv6oPPPoE隧道组播匹配模式（仅针对ONT拨号） */
    HI_DP_L2_IP_MC_MATCH_MODE_E    em_ipv4_ppp_match_mode;            /* Ipv4oPPPoE隧道组播匹配模式（仅针对ONT拨号） */
    HI_DP_L2_IP_MC_MATCH_MODE_E    em_ipv4_in_tunnel_match_mode;      /* IP隧道组播匹配模式（仅对出IP隧道报文有效） */
    HI_DP_L2_IP_MC_MATCH_MODE_E    em_ipv6_in_tunnel_match_mode;      /* IP隧道(6RD)组播匹配模式（仅对出IP隧道报文有效） */
}hi_dp_l2_mc_attr_s;
