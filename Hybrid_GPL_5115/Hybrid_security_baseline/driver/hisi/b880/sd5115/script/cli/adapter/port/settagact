[settings]
functionname = hi_adapter_cli_lsw_port_set_tag_act;
attributenum = 4;
attributeflag= 1;


[parameter]
attribute=alias<port>       type<uint>    range<0x0,0x7>                        default<0>;
attribute=alias<dir>        type<uint>    range<0x0,0x1>                        default<0>;
attribute=alias<tagtype>    type<uint>    range<0x0,0x2>                        default<0>;
attribute=alias<tagact>     type<uint>    range<0x0,0x11>                        default<0>;

[help]
typedef struct
{
    hi_lsw_port_e em_port;
    hi_uint32     ui_dir; /* 表示方向 */
    hi_uint32     ui_tagtype;
    hi_uint32     ui_tagact;
}hi_lsw_port_tag_act_s;

/*端口号定义*/
typedef enum
{
    HI_LSW_PORT_GE0_E   = 0,
    HI_LSW_PORT_FE1_E   = 1,
    HI_LSW_PORT_FE2_E   = 2,
    HI_LSW_PORT_FE3_E   = 3,
    HI_LSW_PORT_FE4_E   = 4,
    HI_LSW_PORT_PON_E   = 5,
    HI_LSW_PORT_CPU_E   = 6,
    HI_LSW_PORT_MAX_E,
}hi_lsw_port_e;

/* 方向定义 */
typedef enum 
{
    HI_LSW_IGR_TAG_ACT_E = 0,                                     /* 表示入口方向 */
    HI_LSW_EGR_TAG_ACT_E,                                     /* 表示出口方向*/
}hi_lsw_inout_e;

typedef enum 
{
    HI_LSW_TAG_ACT_E    = 0,                                     /* tag      动作 */
    HI_LSW_PRI_TAG_ACT_E,                                  /* pri tag 动作*/
    HI_LSW_UATAG_ACT_E,                                     /* untag  动作*/ 
}hi_lsw_tag_type_e;

typedef enum
{
    HI_LSW_TAG_NO_ACTION_E = 0,        
    HI_LSW_TAG_ADD_E,
    HI_LSW_TAG_DEL_E,    
    HI_LSW_TAG_DROP_E,
    HI_LSW_TAG_DEFAULT_DROP_E,
    HI_LSW_TAG_REP_OUTER_DEFAULT_E,     
    HI_LSW_TAG_REP_OUTER_TRANS_DROP_E, 
    HI_LSW_TAG_REP_OUTER_TRANS_TRUE_E,
    HI_LSW_TAG_CHECK_E,  
    HI_LSW_TAG_SWITCH_E, 
    HI_LSW_TAG_HYBRID_E,
    HI_LSW_TAG_ACT_NUM_E,
}hi_lsw_tag_act_e;