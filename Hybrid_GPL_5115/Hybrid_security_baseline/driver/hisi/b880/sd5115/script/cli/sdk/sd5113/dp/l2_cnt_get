[settings]
functionname=0xF7002004;
attributenum=28;
attributeflag = 1 ;   //0:close 1:open

[parameter]
attribute=alias<module>       			type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000711>; /*全局模块*/
attribute=alias<ui_know_uc>       		type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_unknow_uc>       	type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_know_mc>       		type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_unknow_mc>       	type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_mc_copy>       		type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_learn_fail>       	type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_learn_from_eth0>     type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_learn_from_eth1>     type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_learn_from_eth2>     type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_learn_from_eth3>     type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_learn_from_eth4>     type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_learn_from_pon>      type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_learn_from_cpu>      type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_cpu_learn>       	type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_learn_fail_tocpu>    type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_static_err_tocpu>    type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_age>       			type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_unknow_tocpu>       	type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_copy_tocpu>       	type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_unknow_uc_drop>      type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_unknow_mc_drop>      type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_bc_invalid_drop>     type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_mc_invalid_drop>     type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_uc_irg_filter_drop>  type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_bc_irg_filter_drop>  type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_learn_fail_drop>     type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;
attribute=alias<ui_invalid_smac_drop>   type<uint>   range<0x0,0xFFFFFFFF>  default<0x00000000>;

[help]

typedef struct
{
    uint ui_know_uc;                /* 已知单播报文计数 */
    uint ui_unknow_uc;              /* 未知单播报文计数 */
    uint ui_know_mc;                /* 已知组播报文计数 */
    uint ui_unknow_mc;              /* 未知组播报文计数 */
    uint ui_bc;                     /* 广播报文计数 */
    uint ui_mc_copy;                /* 组播复制报文计数 */

    uint ui_learn_fail;             /* 学习失败的次数          */
    uint ui_learn_from_eth0;        /* 逻辑从GE0/FE0学习的次数     */
    uint ui_learn_from_eth1;        /* 逻辑从GE1/FE1学习的次数     */
    uint ui_learn_from_eth2;        /* 逻辑从FE2学习的次数         */
    uint ui_learn_from_eth3;        /* 逻辑从FE3学习的次数         */
    uint ui_learn_from_eth4;        /* 逻辑从FE4学习的次数         */
    uint ui_learn_from_pon;         /* 逻辑从PON学习的次数         */
    uint ui_learn_from_cpu;         /* 逻辑从CPU学习的次数         */
    uint ui_cpu_learn;              /* 逻辑交由CPU学习的报文计数  */
    uint ui_learn_fail_tocpu;       /* 逻辑学习失败交给CPU处理报文计数  */
    uint ui_static_err_tocpu;       /* 报文源端口与静态表项不一致，交由CPU处理计数  */
    uint ui_age;                    /* 老化表项计数  */

    uint ui_unknow_tocpu;           /* 未知单播、组播转交CPU处理 */
    uint ui_copy_tocpu;             /* 转发成功报文拷贝给CPU计数 */

    uint ui_unknow_uc_drop;         /* 未知单播报文丢弃计数 */
    uint ui_unknow_mc_drop;         /* 未知组播报文丢弃计数 */
    uint ui_bc_invalid_drop;        /* 广播报文的没有广播端口丢弃计数 */
    uint ui_mc_invalid_drop;        /* 已知组播报文没有组播端口丢弃计数 */
    uint ui_uc_irg_filter_drop;     /* 源端口抑制丢弃单播报文计数 */
    uint ui_bc_irg_filter_drop;     /* 源端口抑制丢弃广播报文计数 */
    uint ui_learn_fail_drop;        /* 学习失败丢弃报文计数 */
    uint ui_invalid_smac_drop;      /* SMAC非法丢包 */

}hi_dp_l2_cnt_s;